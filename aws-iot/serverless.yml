service: rpi-aws-iot-prototype
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.11
  region: us-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::rpi-atmospheric-data/*"
    - Effect: "Allow"
      Action:
        - "sagemaker:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "iam:PassRole"
      Resource: "*"

constructs:
  sensor-events:
    type: queue
    worker:
      handler: handler.data_appender
      environment:
        S3_BUCKET: rpi-atmospheric-data

functions:
  eventReceiver:
    handler: handler.event_receiver
    memorySize: 256
    environment:
      QUEUE_URL: ${construct:sensor-events.queueUrl}
  fetchData:
    handler: handler.fetch_data
    memorySize: 256
    environment:
      S3_BUCKET: rpi-atmospheric-data
    events:
      - http:
          path: /fetch
          method: GET
          cors: true
  generateCSVFromDailyData:
    handler: prepare.generate_csv_from_daily_data
    memorySize: 512
    environment:
      S3_BUCKET: rpi-atmospheric-data
  trainModels:
    handler: prepare.train_models
    memorySize: 256
    timeout: 360
    environment:
      S3_BUCKET: rpi-atmospheric-data
  deployModels:
    handler: predict.deploy_models
    memorySize: 256
    timeout: 360
    environment:
      S3_BUCKET: rpi-atmospheric-data
  predictDailyAtmosphericMetrics:
    handler: predict.predict_daily_atmospheric_metrics
    memorySize: 256
    timeout: 360
    environment:
      S3_BUCKET: rpi-atmospheric-data
  cleanUpPredictionResources:
    handler: predict.cleanup_resources
    memorySize: 256
    environment:
      S3_BUCKET: rpi-atmospheric-data


stepFunctions:
  stateMachines:
    futurePredictorStateMachine:
      definition:
        Comment: "Aggregates data weekly, generates a ML model to do future predictions, predicts the next 7 days, and tears down the model."
        StartAt: AggregateData
        States:
          AggregateData:
            Type: Task
            Resource:
              Fn::GetAtt: [generateCSVFromDailyData, Arn]
            Next: TrainModels
          TrainModels:
            Type: Task
            Resource:
              Fn::GetAtt: [trainModels, Arn]
            Next: DeployModels
            ResultPath: "$.models"
          DeployModels:
            Type: Task
            Resource:
              Fn::GetAtt: [deployModels, Arn]
            Next: PredictNext7Days
            ResultPath: "$.aggregateFileKey"
          PredictNext7Days:
            Type: Task
            Resource:
              Fn::GetAtt: [predictDailyAtmosphericMetrics, Arn]
            Next: CleanUp
            ResultPath: "$.models"
          CleanUp:
            Type: Task
            Resource:
              Fn::GetAtt: [cleanUpPredictionResources, Arn]
            End: true

resources:
  Resources:
    AllEventsRule:
      Type: "AWS::IoT::TopicRule"
      Properties:
        RuleName: all_events_rule
        TopicRulePayload:
          Sql: "SELECT * FROM 'rpi/sensor/events'"
          Actions:
            - Lambda:
                FunctionArn:
                  Fn::GetAtt:
                    # Note that the function name "EventReceiverLambdaFunction" corresponds to the "eventReceiver"
                    # function declared under the "functions" section. This is just the way that Serverless
                    # Framework, by convention, names functions using the function key under "functions"
                    - EventReceiverLambdaFunction
                    - Arn
    RPiB3Home:
      Type: "AWS::IoT::Thing"
      Properties:
        ThingName: RPi3BHome



plugins:
  - serverless-lift
  - serverless-python-requirements
  - serverless-localstack
  - serverless-step-functions


package:
  patterns:
    - "!node_modules/**"

custom:
  # For local testing/debugging of lambda functions, we use localstack to simulate AWS services.
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566
    autostart: true
    lambda:
      mountCode: true
  pythonRequirements:
    dockerizePip: true
    zip: true
